image: node:18.12.1
cache:
    paths:
        - node_modules

variables:
  IS_OFFLINE: $IS_OFFLINE
  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
  PROD_API_USER_AWS_ACCESS_KEY_ID: $PROD_API_USER_AWS_ACCESS_KEY_ID
  PROD_API_USER_AWS_SECRET_ACCESS_KEY: $PROD_API_USER_AWS_SECRET_ACCESS_KEY
  AWS_REGION: $AWS_DEFAULT_REGION
  AUTH0_M2M_API_CLIENT_ID: $AUTH0_M2M_API_CLIENT_ID
  AUTH0_M2M_API_CLIENT_SECRET: $AUTH0_M2M_API_CLIENT_SECRET
  LOCAL_DATABASE_CREDENTIALS: $LOCAL_DATABASE_CREDENTIALS
  DATABASE_HOST: $DATABASE_HOST
  DATABASE_PASSWORD: $DATABASE_PASSWORD
  SONAR_USER_HOME: '${CI_PROJECT_DIR}/.sonar' # Defines the location of the analysis task cache
  GIT_DEPTH: '0' # Tells git to fetch all the branches of the project, required by the analysis task
  # This is required for the old version of serverless to work. 
  # We have to specifiy this option because some cryptographic algorithms deprecated in the latest version of Node 18
  NODE_OPTIONS: '--openssl-legacy-provider'           


stages:
  - test
  - sonar-scan
  - deploy

sonar-scan:
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: ['']
  cache:
    key: '${CI_JOB_NAME}'
    paths:
      - .sonar/cache
  stage: sonar-scan
  script:
    - apk add --no-cache 'npm>7'
    - echo "Building deploy package"
    - echo "Finish running tests. Starting Sonar Scanner"
    - sonar-scanner -Dsonar.qualitygate.wait=true
    - echo "Build and unit test successful"
  artifacts:
    expire_in: 1 hour
    paths:
    # Add your path
      - /builds/api/coverage
  allow_failure: false  
  only:
    - master
    - merge_requests

test:
  stage: test
  script:
    - npm install
    - npm test
    - echo "Finish running tests"
  artifacts:
    expire_in: 1 hour
    paths:
      # Add your path here
      - /builds/api/coverage
  allow_failure: false  
  only:
    - master
    - merge_requests

npm-audit:
  stage: test
  script:
    - echo "Running npm audit for critical vulnerabilities"
    - npm install --force
    - npm run security-audit:prod
    - echo "Audit for critical vulnerabilities successful"
  only:
    - merge_requests

type-check:
  stage: test
  script:
    - echo "Running Typescript compiler"
    - npm install
    - npx tsc
    - echo "Audit for critical vulnerabilities successful"
  # Without only it doesnt run on every MR and on master
  only:
    - merge_requests
    - master

deploy_prod:
    stage: deploy
    script:
        - echo "Deploying to server"
        - npm install
        - npm run deploy
        - echo "Deployed"
    environment:
        name: production
        url: https://api.example.com/
    only:
        - master
    variables:
        STAGE: production
        # ADD your gateway id
        FLOMATIKA_APIGW_ID: ########
        DB_NAMESPACE: api-prod
        REACT_APP_API_BASE_URL: https://api.example.com/
        SLS_DEBUG: "*"


